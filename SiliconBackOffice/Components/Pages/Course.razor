@page "/course"
@using System.Net.Http
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http

<h3>Create a New Course</h3>

<EditForm Model="course" OnValidSubmit="HandleValidSubmit" FormName="course">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <!-- Form Fields -->
    <div>
        <label>Image URI:</label>
        <InputText id="imageUri" @bind-Value="course.ImageUri" />
    </div>

    <div>
        <label>Image Header URI:</label>
        <InputText id="imageHeaderUri" @bind-Value="course.ImageHeaderUri" />
    </div>

    <div>
        <label>Is Bestseller:</label>
        <InputCheckbox id="isBestseller" @bind-Value="course.IsBestseller" />
    </div>

    <div>
        <label>Is Digital:</label>
        <InputCheckbox id="isDigital" @bind-Value="course.IsDigital" />
    </div>

    <div>
        <label>Categories (comma separated):</label>
        <InputText id="categories" @bind-Value="categories" />
    </div>

    <div>
        <label>Title:</label>
        <InputText id="title" @bind-Value="course.Title" />
    </div>

    <div>
        <label>Ingress:</label>
        <InputText id="ingress" @bind-Value="course.Ingress" />
    </div>

    <div>
        <label>Star Rating:</label>
        <InputNumber id="starRating" @bind-Value="course.StarRating" />
    </div>

    <div>
        <label>Reviews:</label>
        <InputText id="reviews" @bind-Value="course.Reviews" />
    </div>

    <div>
        <label>Likes in Percent:</label>
        <InputText id="likesInProcent" @bind-Value="course.LikesInProcent" />
    </div>

    <div>
        <label>Likes:</label>
        <InputText id="likes" @bind-Value="course.Likes" />
    </div>

    <div>
        <label>Hours:</label>
        <InputText id="hours" @bind-Value="course.Hours" />
    </div>

    <div>
        <label>Author Name:</label>
        <InputText id="authorName" @bind-Value="course.Authors[0].Name" />
    </div>

    <div>
        <label>Currency:</label>
        <InputText id="currency" @bind-Value="course.Prices.Currency" />
    </div>

    <div>
        <label>Price:</label>
        <InputNumber id="price" @bind-Value="course.Prices.Price" />
    </div>

    <div>
        <label>Discount:</label>
        <InputNumber id="discount" @bind-Value="course.Prices.Discount" />
    </div>

    <div>
        <label>Description:</label>
        <InputTextArea id="description" @bind-Value="course.Content.Description" />
    </div>

    <div>
        <label>Includes (comma separated):</label>
        <InputText id="includes" @bind-Value="includes" />
    </div>

    <div>
        <label>Program Details (format: id:title:description, comma separated):</label>
        <InputText id="programDetails" @bind-Value="programDetails" />
    </div>

    <button type="submit">Create Course</button>
</EditForm>

@code {
    private CourseCreateRequestInput course = new CourseCreateRequestInput
        {
            Authors = new List<Author> { new Author() },
            Prices = new Prices(),
            Content = new Content()
        };

    private string categories;
    private string includes;
    private string programDetails;

    private async Task HandleValidSubmit()
    {
        Console.WriteLine($"Course Title: {course.Title}");
        Console.WriteLine($"Image URI: {course.ImageUri}");
        Console.WriteLine($"Image Header URI: {course.ImageHeaderUri}");
        Console.WriteLine($"Is Bestseller: {course.IsBestseller}");
        Console.WriteLine($"Is Digital: {course.IsDigital}");
        Console.WriteLine($"Categories: {string.Join(", ", course.Categories)}");
        Console.WriteLine($"Hours: {course.Hours}");
        Console.WriteLine($"Ingress: {course.Ingress}");


        if (categories != null)
        {
            course.Categories = categories.Split(',').Select(c => c.Trim()).ToList();
        }
        else
        {
            course.Categories = new List<string>();
        }
        if (includes != null)
        {
            course.Content.Includes = includes.Split(',').Select(i => i.Trim()).ToList();
        }
        else
        {
            course.Content.Includes = new List<string>();
        }

        if (programDetails != null)
        {
            course.Content.ProgramDetails = programDetails.Split(',')
                .Select(pd => pd.Split(':'))
                .Select(parts => new ProgramDetail
                    {
                        Id = int.Parse(parts[0]),
                        Title = parts[1],
                        Description = parts[2]
                    }).ToList();
        }
        else
        {
            course.Content.ProgramDetails = new List<ProgramDetail>();
        }


        var request = new
        {
            query = "mutation ($input: CourseCreateRequestInput!) { createCourse(input: $input) { id title } }",
            variables = new { input = course }
        };

        var response = await Http.PostAsJsonAsync("https://courseprovider-js.azurewebsites.net/api/graphql?code=EgqwsylmzpLETaxlEGIn2eejQhTsqWNK6pPLpkIML-UfAzFu4AXpBQ%3D%3D", request);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<ResponseData>();
            Console.WriteLine($"Course created with ID: {result.Data.CreatedCourse.Id}");
        }
        else
        {
            Console.WriteLine("Error creating course.");
        }
    }

    public class CourseCreateRequestInput
    {
        public string ImageUri { get; set; }
        public string ImageHeaderUri { get; set; }
        public bool IsBestseller { get; set; }
        public bool IsDigital { get; set; }
        public List<string> Categories { get; set; }
        public string Title { get; set; }
        public string Ingress { get; set; }
        public int StarRating { get; set; }
        public string Reviews { get; set; }
        public string LikesInProcent { get; set; }
        public string Likes { get; set; }
        public string Hours { get; set; }
        public List<Author> Authors { get; set; }
        public Prices Prices { get; set; }
        public Content Content { get; set; }
    }

    public class Author
    {
        public string Name { get; set; }
    }

    public class Prices
    {
        public string Currency { get; set; }
        public decimal Price { get; set; }
        public decimal Discount { get; set; }
    }

    public class Content
    {
        public string Description { get; set; }
        public List<string> Includes { get; set; }
        public List<ProgramDetail> ProgramDetails { get; set; }
    }

    public class ProgramDetail
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
    }

    public class ResponseData
    {
        public CreateCourseData Data { get; set; }
    }

    public class CreateCourseData
    {
        public CreatedCourse CreatedCourse { get; set; }
    }

    public class CreatedCourse
    {
        public string Id { get; set; }
        public string Title { get; set; }
    }
}